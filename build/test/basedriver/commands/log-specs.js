"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("source-map-support/register");
var _log = _interopRequireDefault(require("../../../lib/basedriver/commands/log"));
var _chai = _interopRequireDefault(require("chai"));
var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));
var _sinon = _interopRequireDefault(require("sinon"));
var _lodash = _interopRequireDefault(require("lodash"));
_chai.default.should();
_chai.default.use(_chaiAsPromised.default);
const expect = _chai.default.expect;
const FIRST_LOGS = ['first', 'logs'];
const SECOND_LOGS = ['second', 'logs'];
const SUPPORTED_LOG_TYPES = {
  one: {
    description: 'First logs',
    getter: () => _lodash.default.clone(FIRST_LOGS)
  },
  two: {
    description: 'Seconds logs',
    getter: () => _lodash.default.clone(SECOND_LOGS)
  }
};
describe('log commands -', function () {
  beforeEach(function () {
    _log.default.supportedLogTypes = {};
  });
  describe('getLogTypes', function () {
    it('should return empty array when no supported log types', async function () {
      (await _log.default.getLogTypes()).should.eql([]);
    });
    it('should return keys to log type object', async function () {
      _log.default.supportedLogTypes = SUPPORTED_LOG_TYPES;
      (await _log.default.getLogTypes()).should.eql(['one', 'two']);
    });
  });
  describe('getLog', function () {
    beforeEach(function () {
      _sinon.default.spy(SUPPORTED_LOG_TYPES.one, 'getter');
      _sinon.default.spy(SUPPORTED_LOG_TYPES.two, 'getter');
    });
    afterEach(function () {
      SUPPORTED_LOG_TYPES.one.getter.restore();
      SUPPORTED_LOG_TYPES.two.getter.restore();
    });
    it('should throw error if log type not supported', async function () {
      await _log.default.getLog('one').should.eventually.be.rejected;
      SUPPORTED_LOG_TYPES.one.getter.called.should.be.false;
      SUPPORTED_LOG_TYPES.two.getter.called.should.be.false;
    });
    it('should throw an error with available log types if log type not supported', async function () {
      _log.default.supportedLogTypes = SUPPORTED_LOG_TYPES;
      let err;
      try {
        await _log.default.getLog('three');
      } catch (_err) {
        err = _err;
      }
      expect(err).to.exist;
      err.message.should.eql(`Unsupported log type 'three'. Supported types: {"one":"First logs","two":"Seconds logs"}`);
      SUPPORTED_LOG_TYPES.one.getter.called.should.be.false;
      SUPPORTED_LOG_TYPES.two.getter.called.should.be.false;
    });
    it('should call getter on appropriate log when found', async function () {
      _log.default.supportedLogTypes = SUPPORTED_LOG_TYPES;
      let logs = await _log.default.getLog('one');
      logs.should.eql(FIRST_LOGS);
      SUPPORTED_LOG_TYPES.one.getter.called.should.be.true;
      SUPPORTED_LOG_TYPES.two.getter.called.should.be.false;
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
