"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("source-map-support/register");
var _armorSupport = require("armor-support");
var _helpers = require("../../lib/basedriver/helpers");
var _chai = _interopRequireDefault(require("chai"));
var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));
var _sinon = _interopRequireDefault(require("sinon"));
_chai.default.use(_chaiAsPromised.default);
const should = _chai.default.should();
describe('helpers', function () {
  describe('#isPackageOrBundle', function () {
    it('should accept packages and bundles', function () {
      (0, _helpers.isPackageOrBundle)('io.armor.testapp').should.be.true;
    });
    it('should not accept non-packages or non-bundles', function () {
      (0, _helpers.isPackageOrBundle)('foo').should.be.false;
      (0, _helpers.isPackageOrBundle)('/path/to/an.app').should.be.false;
      (0, _helpers.isPackageOrBundle)('/path/to/an.apk').should.be.false;
    });
  });
  describe('#duplicateKeys', function () {
    it('should translate key in an object', function () {
      (0, _helpers.duplicateKeys)({
        'foo': 'hello world'
      }, 'foo', 'bar').should.eql({
        'foo': 'hello world',
        'bar': 'hello world'
      });
    });
    it('should translate key in an object within an object', function () {
      (0, _helpers.duplicateKeys)({
        'key': {
          'foo': 'hello world'
        }
      }, 'foo', 'bar').should.eql({
        'key': {
          'foo': 'hello world',
          'bar': 'hello world'
        }
      });
    });
    it('should translate key in an object with an array', function () {
      (0, _helpers.duplicateKeys)([{
        'key': {
          'foo': 'hello world'
        }
      }, {
        'foo': 'HELLO WORLD'
      }], 'foo', 'bar').should.eql([{
        'key': {
          'foo': 'hello world',
          'bar': 'hello world'
        }
      }, {
        'foo': 'HELLO WORLD',
        'bar': 'HELLO WORLD'
      }]);
    });
    it('should duplicate both keys', function () {
      (0, _helpers.duplicateKeys)({
        'keyOne': {
          'foo': 'hello world'
        },
        'keyTwo': {
          'bar': 'HELLO WORLD'
        }
      }, 'foo', 'bar').should.eql({
        'keyOne': {
          'foo': 'hello world',
          'bar': 'hello world'
        },
        'keyTwo': {
          'bar': 'HELLO WORLD',
          'foo': 'HELLO WORLD'
        }
      });
    });
    it('should not do anything to primitives', function () {
      [0, 1, -1, true, false, null, undefined, '', 'Hello World'].forEach(item => {
        should.equal((0, _helpers.duplicateKeys)(item), item);
      });
    });
    it('should rename keys on big complex objects', function () {
      const input = [{
        'foo': 'bar'
      }, {
        hello: {
          world: {
            'foo': 'BAR'
          }
        },
        foo: 'bahr'
      }, 'foo', null, 0];
      const expectedOutput = [{
        'foo': 'bar',
        'FOO': 'bar'
      }, {
        hello: {
          world: {
            'foo': 'BAR',
            'FOO': 'BAR'
          }
        },
        foo: 'bahr',
        FOO: 'bahr'
      }, 'foo', null, 0];
      (0, _helpers.duplicateKeys)(input, 'foo', 'FOO').should.deep.equal(expectedOutput);
    });
  });
  describe('#configureApp', function () {
    let sandbox;
    beforeEach(function () {
      sandbox = _sinon.default.createSandbox();
      sandbox.stub(_armorSupport.zip, 'extractAllTo').resolves();
      sandbox.stub(_armorSupport.zip, 'assertValidZip').resolves();
      sandbox.stub(_armorSupport.fs, 'mv').resolves();
      sandbox.stub(_armorSupport.fs, 'exists').resolves(true);
      sandbox.stub(_armorSupport.fs, 'hash').resolves('0xDEADBEEF');
      sandbox.stub(_armorSupport.fs, 'glob').resolves(['/path/to/an.apk']);
      sandbox.stub(_armorSupport.fs, 'rimraf').resolves();
      sandbox.stub(_armorSupport.fs, 'stat').resolves({
        isDirectory: () => false
      });
      sandbox.stub(_armorSupport.tempDir, 'openDir').resolves('/some/dir');
    });
    afterEach(function () {
      sandbox.restore();
    });
    it('should pass "useSystemUnzip" flag through to armor-support', async function () {
      await (0, _helpers.configureApp)('/path/to/an.apk.zip', '.apk');
      _armorSupport.zip.extractAllTo.getCall(0).lastArg.useSystemUnzip.should.be.true;
    });
  });
});
describe('parseCapsArray', function () {
  it('should parse string into array', function () {
    (0, _helpers.parseCapsArray)('/tmp/my/app.zip').should.eql(['/tmp/my/app.zip']);
  });
  it('should parse array as string into array', function () {
    (0, _helpers.parseCapsArray)('["/tmp/my/app.zip"]').should.eql(['/tmp/my/app.zip']);
    (0, _helpers.parseCapsArray)('["/tmp/my/app.zip","/tmp/my/app2.zip"]').should.eql(['/tmp/my/app.zip', '/tmp/my/app2.zip']);
  });
  it('should return an array without change', function () {
    (0, _helpers.parseCapsArray)(['a', 'b']).should.eql(['a', 'b']);
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9iYXNlZHJpdmVyL2hlbHBlcnMtc3BlY3MuanMiLCJuYW1lcyI6WyJfYXJtb3JTdXBwb3J0IiwicmVxdWlyZSIsIl9oZWxwZXJzIiwiX2NoYWkiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NoYWlBc1Byb21pc2VkIiwiX3Npbm9uIiwiY2hhaSIsInVzZSIsImNoYWlBc1Byb21pc2VkIiwic2hvdWxkIiwiZGVzY3JpYmUiLCJpdCIsImlzUGFja2FnZU9yQnVuZGxlIiwiYmUiLCJ0cnVlIiwiZmFsc2UiLCJkdXBsaWNhdGVLZXlzIiwiZXFsIiwidW5kZWZpbmVkIiwiZm9yRWFjaCIsIml0ZW0iLCJlcXVhbCIsImlucHV0IiwiaGVsbG8iLCJ3b3JsZCIsImZvbyIsImV4cGVjdGVkT3V0cHV0IiwiRk9PIiwiZGVlcCIsInNhbmRib3giLCJiZWZvcmVFYWNoIiwic2lub24iLCJjcmVhdGVTYW5kYm94Iiwic3R1YiIsInppcCIsInJlc29sdmVzIiwiZnMiLCJpc0RpcmVjdG9yeSIsInRlbXBEaXIiLCJhZnRlckVhY2giLCJyZXN0b3JlIiwiY29uZmlndXJlQXBwIiwiZXh0cmFjdEFsbFRvIiwiZ2V0Q2FsbCIsImxhc3RBcmciLCJ1c2VTeXN0ZW1VbnppcCIsInBhcnNlQ2Fwc0FycmF5Il0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiIsInNvdXJjZXMiOlsidGVzdC9iYXNlZHJpdmVyL2hlbHBlcnMtc3BlY3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgemlwLCBmcywgdGVtcERpciB9IGZyb20gJ2FybW9yLXN1cHBvcnQnO1xuaW1wb3J0IHsgY29uZmlndXJlQXBwLCBpc1BhY2thZ2VPckJ1bmRsZSwgZHVwbGljYXRlS2V5cywgcGFyc2VDYXBzQXJyYXkgfSBmcm9tICcuLi8uLi9saWIvYmFzZWRyaXZlci9oZWxwZXJzJztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcblxuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuY29uc3Qgc2hvdWxkID0gY2hhaS5zaG91bGQoKTtcblxuZGVzY3JpYmUoJ2hlbHBlcnMnLCBmdW5jdGlvbiAoKSB7XG4gIGRlc2NyaWJlKCcjaXNQYWNrYWdlT3JCdW5kbGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBhY2NlcHQgcGFja2FnZXMgYW5kIGJ1bmRsZXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpc1BhY2thZ2VPckJ1bmRsZSgnaW8uYXJtb3IudGVzdGFwcCcpLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgbm90IGFjY2VwdCBub24tcGFja2FnZXMgb3Igbm9uLWJ1bmRsZXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpc1BhY2thZ2VPckJ1bmRsZSgnZm9vJykuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgaXNQYWNrYWdlT3JCdW5kbGUoJy9wYXRoL3RvL2FuLmFwcCcpLnNob3VsZC5iZS5mYWxzZTtcbiAgICAgIGlzUGFja2FnZU9yQnVuZGxlKCcvcGF0aC90by9hbi5hcGsnKS5zaG91bGQuYmUuZmFsc2U7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCcjZHVwbGljYXRlS2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIHRyYW5zbGF0ZSBrZXkgaW4gYW4gb2JqZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgZHVwbGljYXRlS2V5cyh7J2Zvbyc6ICdoZWxsbyB3b3JsZCd9LCAnZm9vJywgJ2JhcicpLnNob3VsZC5lcWwoeydmb28nOiAnaGVsbG8gd29ybGQnLCAnYmFyJzogJ2hlbGxvIHdvcmxkJ30pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgdHJhbnNsYXRlIGtleSBpbiBhbiBvYmplY3Qgd2l0aGluIGFuIG9iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGR1cGxpY2F0ZUtleXMoeydrZXknOiB7J2Zvbyc6ICdoZWxsbyB3b3JsZCd9fSwgJ2ZvbycsICdiYXInKS5zaG91bGQuZXFsKHsna2V5Jzogeydmb28nOiAnaGVsbG8gd29ybGQnLCAnYmFyJzogJ2hlbGxvIHdvcmxkJ319KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHRyYW5zbGF0ZSBrZXkgaW4gYW4gb2JqZWN0IHdpdGggYW4gYXJyYXknLCBmdW5jdGlvbiAoKSB7XG4gICAgICBkdXBsaWNhdGVLZXlzKFtcbiAgICAgICAgeydrZXknOiB7J2Zvbyc6ICdoZWxsbyB3b3JsZCd9fSxcbiAgICAgICAgeydmb28nOiAnSEVMTE8gV09STEQnfVxuICAgICAgXSwgJ2ZvbycsICdiYXInKS5zaG91bGQuZXFsKFtcbiAgICAgICAgeydrZXknOiB7J2Zvbyc6ICdoZWxsbyB3b3JsZCcsICdiYXInOiAnaGVsbG8gd29ybGQnfX0sXG4gICAgICAgIHsnZm9vJzogJ0hFTExPIFdPUkxEJywgJ2Jhcic6ICdIRUxMTyBXT1JMRCd9XG4gICAgICBdKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGR1cGxpY2F0ZSBib3RoIGtleXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBkdXBsaWNhdGVLZXlzKHtcbiAgICAgICAgJ2tleU9uZSc6IHtcbiAgICAgICAgICAnZm9vJzogJ2hlbGxvIHdvcmxkJyxcbiAgICAgICAgfSxcbiAgICAgICAgJ2tleVR3byc6IHtcbiAgICAgICAgICAnYmFyJzogJ0hFTExPIFdPUkxEJyxcbiAgICAgICAgfSxcbiAgICAgIH0sICdmb28nLCAnYmFyJykuc2hvdWxkLmVxbCh7XG4gICAgICAgICdrZXlPbmUnOiB7XG4gICAgICAgICAgJ2Zvbyc6ICdoZWxsbyB3b3JsZCcsXG4gICAgICAgICAgJ2Jhcic6ICdoZWxsbyB3b3JsZCcsXG4gICAgICAgIH0sXG4gICAgICAgICdrZXlUd28nOiB7XG4gICAgICAgICAgJ2Jhcic6ICdIRUxMTyBXT1JMRCcsXG4gICAgICAgICAgJ2Zvbyc6ICdIRUxMTyBXT1JMRCcsXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgbm90IGRvIGFueXRoaW5nIHRvIHByaW1pdGl2ZXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBbMCwgMSwgLTEsIHRydWUsIGZhbHNlLCBudWxsLCB1bmRlZmluZWQsICcnLCAnSGVsbG8gV29ybGQnXS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIHNob3VsZC5lcXVhbChkdXBsaWNhdGVLZXlzKGl0ZW0pLCBpdGVtKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgcmVuYW1lIGtleXMgb24gYmlnIGNvbXBsZXggb2JqZWN0cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGlucHV0ID0gW1xuICAgICAgICB7J2Zvbyc6ICdiYXInfSxcbiAgICAgICAge1xuICAgICAgICAgIGhlbGxvOiB7XG4gICAgICAgICAgICB3b3JsZDoge1xuICAgICAgICAgICAgICAnZm9vJzogJ0JBUicsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmb286ICdiYWhyJ1xuICAgICAgICB9LFxuICAgICAgICAnZm9vJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgMFxuICAgICAgXTtcbiAgICAgIGNvbnN0IGV4cGVjdGVkT3V0cHV0ID0gW1xuICAgICAgICB7J2Zvbyc6ICdiYXInLCAnRk9PJzogJ2Jhcid9LFxuICAgICAgICB7XG4gICAgICAgICAgaGVsbG86IHtcbiAgICAgICAgICAgIHdvcmxkOiB7XG4gICAgICAgICAgICAgICdmb28nOiAnQkFSJyxcbiAgICAgICAgICAgICAgJ0ZPTyc6ICdCQVInLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZm9vOiAnYmFocicsXG4gICAgICAgICAgRk9POiAnYmFocidcbiAgICAgICAgfSxcbiAgICAgICAgJ2ZvbycsXG4gICAgICAgIG51bGwsXG4gICAgICAgIDBcbiAgICAgIF07XG4gICAgICBkdXBsaWNhdGVLZXlzKGlucHV0LCAnZm9vJywgJ0ZPTycpLnNob3VsZC5kZWVwLmVxdWFsKGV4cGVjdGVkT3V0cHV0KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJyNjb25maWd1cmVBcHAnLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHNhbmRib3g7XG5cbiAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHNhbmRib3ggPSBzaW5vbi5jcmVhdGVTYW5kYm94KCk7XG4gICAgICBzYW5kYm94LnN0dWIoemlwLCAnZXh0cmFjdEFsbFRvJykucmVzb2x2ZXMoKTtcbiAgICAgIHNhbmRib3guc3R1Yih6aXAsICdhc3NlcnRWYWxpZFppcCcpLnJlc29sdmVzKCk7XG4gICAgICBzYW5kYm94LnN0dWIoZnMsICdtdicpLnJlc29sdmVzKCk7XG4gICAgICBzYW5kYm94LnN0dWIoZnMsICdleGlzdHMnKS5yZXNvbHZlcyh0cnVlKTtcbiAgICAgIHNhbmRib3guc3R1YihmcywgJ2hhc2gnKS5yZXNvbHZlcygnMHhERUFEQkVFRicpO1xuICAgICAgc2FuZGJveC5zdHViKGZzLCAnZ2xvYicpLnJlc29sdmVzKFsnL3BhdGgvdG8vYW4uYXBrJ10pO1xuICAgICAgc2FuZGJveC5zdHViKGZzLCAncmltcmFmJykucmVzb2x2ZXMoKTtcbiAgICAgIHNhbmRib3guc3R1YihmcywgJ3N0YXQnKS5yZXNvbHZlcyh7XG4gICAgICAgIGlzRGlyZWN0b3J5OiAoKSA9PiBmYWxzZSxcbiAgICAgIH0pO1xuICAgICAgc2FuZGJveC5zdHViKHRlbXBEaXIsICdvcGVuRGlyJykucmVzb2x2ZXMoJy9zb21lL2RpcicpO1xuICAgIH0pO1xuXG4gICAgYWZ0ZXJFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHNhbmRib3gucmVzdG9yZSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBwYXNzIFwidXNlU3lzdGVtVW56aXBcIiBmbGFnIHRocm91Z2ggdG8gYXJtb3Itc3VwcG9ydCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGF3YWl0IGNvbmZpZ3VyZUFwcCgnL3BhdGgvdG8vYW4uYXBrLnppcCcsICcuYXBrJyk7XG4gICAgICB6aXAuZXh0cmFjdEFsbFRvLmdldENhbGwoMCkubGFzdEFyZy51c2VTeXN0ZW1VbnppcC5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ3BhcnNlQ2Fwc0FycmF5JywgZnVuY3Rpb24gKCkge1xuICBpdCgnc2hvdWxkIHBhcnNlIHN0cmluZyBpbnRvIGFycmF5JywgZnVuY3Rpb24gKCkge1xuICAgIHBhcnNlQ2Fwc0FycmF5KCcvdG1wL215L2FwcC56aXAnKS5zaG91bGQuZXFsKFsnL3RtcC9teS9hcHAuemlwJ10pO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBwYXJzZSBhcnJheSBhcyBzdHJpbmcgaW50byBhcnJheScsIGZ1bmN0aW9uICgpIHtcbiAgICBwYXJzZUNhcHNBcnJheSgnW1wiL3RtcC9teS9hcHAuemlwXCJdJykuc2hvdWxkLmVxbChbJy90bXAvbXkvYXBwLnppcCddKTtcbiAgICBwYXJzZUNhcHNBcnJheSgnW1wiL3RtcC9teS9hcHAuemlwXCIsXCIvdG1wL215L2FwcDIuemlwXCJdJykuc2hvdWxkLmVxbChbXG4gICAgICAnL3RtcC9teS9hcHAuemlwJyxcbiAgICAgICcvdG1wL215L2FwcDIuemlwJ1xuICAgIF0pO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gYXJyYXkgd2l0aG91dCBjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgcGFyc2VDYXBzQXJyYXkoWydhJywgJ2InXSkuc2hvdWxkLmVxbChbJ2EnLCAnYiddKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUFBLGFBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtBQUNBLElBQUFJLGVBQUEsR0FBQUQsc0JBQUEsQ0FBQUgsT0FBQTtBQUNBLElB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
