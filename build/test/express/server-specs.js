"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("source-map-support/register");
var _ = require("../..");
var _server2 = require("../../lib/express/server");
var _chai = _interopRequireDefault(require("chai"));
var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));
var _sinon = _interopRequireDefault(require("sinon"));
const should = _chai.default.should();
_chai.default.use(_chaiAsPromised.default);
function fakeApp() {
  const app = {
    use: _sinon.default.spy(),
    all: _sinon.default.spy(),
    get: _sinon.default.spy(),
    post: _sinon.default.spy(),
    delete: _sinon.default.spy(),
    totalCount: () => app.use.callCount + app.all.callCount + app.get.callCount + app.post.callCount + app.delete.callCount
  };
  return app;
}
function fakePlugin() {
  return {
    name: 'fake',
    newMethodMap: {
      '/session/:sessionId/fake': {
        GET: {
          command: 'fakeGet'
        },
        POST: {
          command: 'fakePost',
          payloadParams: {
            required: ['fakeParam']
          }
        }
      }
    },
    updatesServer: true,
    updateServer: (app, httpServer) => {
      app.updated = true;
      httpServer.updated = true;
    }
  };
}
function fakeDriver() {
  return {
    sessionExists: () => {},
    executeCommand: () => {}
  };
}
describe('server configuration', function () {
  it('should actually use the middleware', function () {
    const app = fakeApp();
    const configureRoutes = () => {};
    (0, _server2.configureServer)({
      app,
      addRoutes: configureRoutes
    });
    app.use.callCount.should.equal(14);
    app.all.callCount.should.equal(4);
  });
  it('should apply new methods in plugins to the standard method map', function () {
    const app1 = fakeApp();
    const app2 = fakeApp();
    const driver = fakeDriver();
    const addRoutes = (0, _.routeConfiguringFunction)(driver);
    (0, _server2.configureServer)({
      app: app1,
      addRoutes
    });
    (0, _server2.configureServer)({
      app: app2,
      addRoutes,
      plugins: [fakePlugin()]
    });
    app2.totalCount().should.eql(app1.totalCount() + 2);
  });
  it('should silently reject new methods in plugins if not plain objects', function () {
    const app1 = fakeApp();
    const app2 = fakeApp();
    const driver = fakeDriver();
    const addRoutes = (0, _.routeConfiguringFunction)(driver);
    const plugin = fakePlugin();
    plugin.newMethodMap = [];
    (0, _server2.configureServer)({
      app: app1,
      addRoutes
    });
    (0, _server2.configureServer)({
      app: app2,
      addRoutes,
      plugins: [plugin]
    });
    app2.totalCount().should.eql(app1.totalCount());
  });
  it('should allow plugins to update the server', async function () {
    const plugins = [fakePlugin()];
    const driver = fakeDriver();
    const _server = await (0, _.server)({
      routeConfiguringFunction: (0, _.routeConfiguringFunction)(driver),
      port: 8181,
      plugins
    });
    try {
      _server.updated.should.be.true;
    } finally {
      await _server.close();
    }
  });
  it('should reject if error thrown in configureRoutes parameter', async function () {
    const configureRoutes = () => {
      throw new Error('I am Mr. MeeSeeks look at me!');
    };
    await (0, _.server)({
      routeConfiguringFunction: configureRoutes,
      port: 8181
    }).should.be.rejectedWith('MeeSeeks');
  });
  describe('#normalizeBasePath', function () {
    it('should throw an error for paths of the wrong type', function () {
      should.throw(() => {
        (0, _server2.normalizeBasePath)(null);
      });
      should.throw(() => {
        (0, _server2.normalizeBasePath)(1);
      });
    });
    it('should remove trailing slashes', function () {
      (0, _server2.normalizeBasePath)('/wd/hub/').should.eql('/wd/hub');
      (0, _server2.normalizeBasePath)('/foo/').should.eql('/foo');
      (0, _server2.normalizeBasePath)('/').should.eql('');
    });
    it('should ensure a leading slash is present', function () {
      (0, _server2.normalizeBasePath)('foo').should.eql('/foo');
      (0, _server2.normalizeBasePath)('wd/hub').should.eql('/wd/hub');
      (0, _server2.normalizeBasePath)('wd/hub/').should.eql('/wd/hub');
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
