"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("source-map-support/register");
var _2 = require("../..");
var _axios = _interopRequireDefault(require("axios"));
var _chai = _interopRequireDefault(require("chai"));
var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));
var _sinon = _interopRequireDefault(require("sinon"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _lodash = _interopRequireDefault(require("lodash"));
_chai.default.should();
_chai.default.use(_chaiAsPromised.default);
describe('server', function () {
  let hwServer;
  let errorStub;
  before(async function () {
    errorStub = _sinon.default.stub(console, 'error');
    function configureRoutes(app) {
      app.get('/', (req, res) => {
        res.header['content-type'] = 'text/html';
        res.status(200).send('Hello World!');
      });
      app.get('/wd/hub/python', (req, res) => {
        res.status(200).send(req.headers['content-type']);
      });
      app.get('/error', () => {
        throw new Error('hahaha');
      });
      app.get('/pause', async (req, res) => {
        res.header['content-type'] = 'text/html';
        await _bluebird.default.delay(1000);
        res.status(200).send('We have waited!');
      });
    }
    hwServer = await (0, _2.server)({
      routeConfiguringFunction: configureRoutes,
      port: 8181
    });
  });
  after(async function () {
    await hwServer.close();
    errorStub.restore();
  });
  it('should start up with our middleware', async function () {
    const {
      data
    } = await _axios.default.get('http://localhost:8181/');
    data.should.eql('Hello World!');
  });
  it('should fix broken context type', async function () {
    const {
      data
    } = await (0, _axios.default)({
      url: 'http://localhost:8181/wd/hub/python',
      headers: {
        'user-agent': 'Python',
        'content-type': 'application/x-www-form-urlencoded'
      }
    });
    data.should.eql('application/json; charset=utf-8');
  });
  it('should catch errors in the catchall', async function () {
    await _axios.default.get('http://localhost:8181/error').should.be.rejected;
  });
  it('should error if we try to start again on a port that is used', async function () {
    await (0, _2.server)({
      routeConfiguringFunction() {},
      port: 8181
    }).should.be.rejectedWith(/EADDRINUSE/);
  });
  it('should not wait for the server close connections before finishing closing', async function () {
    let bodyPromise = _axios.default.get('http://localhost:8181/pause').catch(() => {});
    await _bluebird.default.delay(100);
    let before = Date.now();
    await hwServer.close();
    (Date.now() - before).should.not.be.above(800);
    await bodyPromise;
  });
  it('should error if we try to start on a bad hostname', async function () {
    this.timeout(60000);
    await (0, _2.server)({
      routeConfiguringFunction: _lodash.default.noop,
      port: 8181,
      hostname: 'lolcathost'
    }).should.be.rejectedWith(/ENOTFOUND|EADDRNOTAVAIL|EAI_AGAIN/);
    await (0, _2.server)({
      routeConfiguringFunction: _lodash.default.noop,
      port: 8181,
      hostname: '1.1.1.1'
    }).should.be.rejectedWith(/EADDRNOTAVAIL/);
  });
});
describe('server plugins', function () {
  let hwServer;
  afterEach(async function () {
    try {
      await hwServer.close();
    } catch (ign) {}
  });
  function updaterWithGetRoute(route, reply) {
    return async (app, httpServer) => {
      app.get(`/${route}`, (req, res) => {
        res.header['content-type'] = 'text/html';
        res.status(200).send(reply);
      });
      httpServer[`_updated_${route}`] = true;
    };
  }
  it.skip('should not allow a plugin to update server if it has updatesServer set to false', async function () {
    hwServer = await (0, _2.server)({
      routeConfiguringFunction: _lodash.default.noop,
      port: 8181,
      plugins: [{
        updatesServer: false,
        updateServer: updaterWithGetRoute('no', 'Should never see this')
      }]
    });
    await _axios.default.get('http://localhost:8181/no').should.eventually.be.rejectedWith(/404/);
  });
  it.skip('should allow one or more plugins to update the server', async function () {
    hwServer = await (0, _2.server)({
      routeConfiguringFunction: _lodash.default.noop,
      port: 8181,
      plugins: [{
        updatesServer: true,
        updateServer: updaterWithGetRoute('plugin1', 'res from plugin1 route')
      }, {
        updatesServer: true,
        updateServer: updaterWithGetRoute('plugin2', 'res from plugin2 route')
      }]
    });
    let {
      data
    } = await _axios.default.get('http://localhost:8181/plugin1');
    data.should.eql('res from plugin1 route');
    ({
      data
    } = await _axios.default.get('http://localhost:8181/plugin2'));
    data.should.eql('res from plugin2 route');
    hwServer._updated_plugin1.should.be.true;
    hwServer._updated_plugin2.should.be.true;
  });
  it('should not allow a plugin to update server if it has incorrect updateServer method', async function () {
    await (0, _2.server)({
      routeConfiguringFunction: _lodash.default.noop,
      port: 8181,
      plugins: [{
        updatesServer: true,
        updateServer: false
      }]
    }).should.eventually.be.rejectedWith(/is not a function/);
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
