"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("source-map-support/register");
var _lodash = require("lodash");
var _protocol = require("../../lib/protocol");
var _crypto = _interopRequireDefault(require("crypto"));
var _chai = _interopRequireDefault(require("chai"));
_chai.default.should();
describe('Protocol', function () {
  describe('ensure protocol consistency', function () {
    it('should not change protocol between patch versions', function () {
      let shasum = _crypto.default.createHash('sha1');
      for (let [url, urlMapping] of _lodash._.toPairs(_protocol.METHOD_MAP)) {
        shasum.update(url);
        for (let [method, methodMapping] of _lodash._.toPairs(urlMapping)) {
          shasum.update(method);
          if (methodMapping.command) {
            shasum.update(methodMapping.command);
          }
          if (methodMapping.payloadParams) {
            let allParams = _lodash._.flatten(methodMapping.payloadParams.required);
            if (methodMapping.payloadParams.optional) {
              allParams = allParams.concat(_lodash._.flatten(methodMapping.payloadParams.optional));
            }
            for (let param of allParams) {
              shasum.update(param);
            }
            if (methodMapping.payloadParams.wrap) {
              shasum.update('skip');
              shasum.update(methodMapping.payloadParams.wrap);
            }
          }
        }
      }
      let hash = shasum.digest('hex').substring(0, 8);
      hash.should.equal('5052d81b');
    });
  });
  describe('check route to command name conversion', function () {
    it('should properly lookup correct command name for endpoint with session', function () {
      const cmdName = (0, _protocol.routeToCommandName)('/timeouts', 'POST');
      cmdName.should.equal('timeouts');
    });
    it('should properly lookup correct command name for endpoint with session', function () {
      const cmdName = (0, _protocol.routeToCommandName)('/timeouts/implicit_wait', 'POST');
      cmdName.should.equal('implicitWait');
    });
    it('should properly lookup correct command name for endpoint without session', function () {
      const cmdName = (0, _protocol.routeToCommandName)('/status', 'GET');
      cmdName.should.equal('getStatus');
    });
    it('should properly lookup correct command name for endpoint without leading slash', function () {
      const cmdName = (0, _protocol.routeToCommandName)('status', 'GET');
      cmdName.should.equal('getStatus');
    });
    it('should properly lookup correct command name for fully specified endpoint', function () {
      const cmdName = (0, _protocol.routeToCommandName)('/wd/hub/status', 'GET');
      cmdName.should.equal('getStatus');
    });
    it('should not find command name if incorrect input data has been specified', function () {
      for (let [route, method] of [['/wd/hub/status', 'POST'], ['/xstatus', 'GET'], ['status', 'POST']]) {
        const cmdName = (0, _protocol.routeToCommandName)(route, method);
        _chai.default.should().equal(cmdName, undefined);
      }
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
