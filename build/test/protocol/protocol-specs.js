"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("source-map-support/register");
require("../..");
var _chai = _interopRequireDefault(require("chai"));
var _sinon = _interopRequireDefault(require("sinon"));
var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));
var _protocol = require("../../lib/protocol/protocol");
var _constants = require("../../lib/constants");
var _driver = _interopRequireDefault(require("../../lib/basedriver/driver"));
_chai.default.should();
_chai.default.use(_chaiAsPromised.default);
describe('Protocol', function () {
  describe('#driverShouldDoJwpProxy', function () {
    it('should not proxy if an image element is found in request url', function () {
      const d = new _driver.default();
      _sinon.default.stub(d, 'proxyActive').returns(true);
      _sinon.default.stub(d, 'proxyRouteIsAvoided').returns(false);
      const hasImageElements = [`/wd/hub/session/:sessionId/element/${_constants.IMAGE_ELEMENT_PREFIX}bar`, `/wd/hub/session/:sessionId/element/${_constants.IMAGE_ELEMENT_PREFIX}bar/click`, `/wd/hub/session/:sessionId/element/${_constants.IMAGE_ELEMENT_PREFIX}bar/submit`, `/wd/hub/session/:sessionId/screenshot/${_constants.IMAGE_ELEMENT_PREFIX}bar`];
      const noImageElements = [`/wd/hub/session/:sessionId/element/${_constants.IMAGE_ELEMENT_PREFIX}`, `/wd/hub/session/:sessionId/screenshot/${_constants.IMAGE_ELEMENT_PREFIX}`, `/wd/hub/session/:sessionId/element/bar${_constants.IMAGE_ELEMENT_PREFIX}`, '/wd/hub/session/:sessionId/element/element123', '/wd/hub/session/:sessionId/title', `/wd/hub/session/:sessionId/notelement/${_constants.IMAGE_ELEMENT_PREFIX}bar`];
      for (let testCase of hasImageElements) {
        const req = {
          body: {},
          params: {},
          originalUrl: testCase
        };
        (0, _protocol.driverShouldDoJwpProxy)(d, req, null).should.be.false;
      }
      for (let testCase of noImageElements) {
        const req = {
          body: {},
          params: {},
          originalUrl: testCase
        };
        (0, _protocol.driverShouldDoJwpProxy)(d, req, null).should.be.true;
      }
    });
    it('should not proxy if an image element is found in request body', function () {
      const d = new _driver.default();
      _sinon.default.stub(d, 'proxyActive').returns(true);
      _sinon.default.stub(d, 'proxyRouteIsAvoided').returns(false);
      const hasImageElements = [{
        [_constants.W3C_ELEMENT_KEY]: `${_constants.IMAGE_ELEMENT_PREFIX}bar`
      }, {
        [_constants.W3C_ELEMENT_KEY]: `${_constants.IMAGE_ELEMENT_PREFIX}foo`
      }, {
        [_constants.MJSONWP_ELEMENT_KEY]: `${_constants.IMAGE_ELEMENT_PREFIX}bar`
      }];
      const noImageElements = [{
        [_constants.IMAGE_ELEMENT_PREFIX]: 'foo'
      }, {
        [_constants.W3C_ELEMENT_KEY]: `${_constants.IMAGE_ELEMENT_PREFIX}`
      }, {
        [_constants.MJSONWP_ELEMENT_KEY]: `${_constants.IMAGE_ELEMENT_PREFIX}`
      }, {
        foo: 'bar'
      }, {
        [_constants.W3C_ELEMENT_KEY]: 'bar'
      }, {
        [_constants.MJSONWP_ELEMENT_KEY]: 'bar'
      }, {
        foo: `${_constants.IMAGE_ELEMENT_PREFIX}bar`
      }, {
        foo: `bar${_constants.IMAGE_ELEMENT_PREFIX}`
      }, {
        [_constants.W3C_ELEMENT_KEY]: `bar${_constants.IMAGE_ELEMENT_PREFIX}`
      }, {
        [_constants.MJSONWP_ELEMENT_KEY]: `bar${_constants.IMAGE_ELEMENT_PREFIX}`
      }];
      for (let testCase of hasImageElements) {
        const req = {
          body: testCase,
          params: {}
        };
        (0, _protocol.driverShouldDoJwpProxy)(d, req, null).should.be.false;
      }
      for (let testCase of noImageElements) {
        const req = {
          body: testCase,
          params: {}
        };
        (0, _protocol.driverShouldDoJwpProxy)(d, req, null).should.be.true;
      }
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
