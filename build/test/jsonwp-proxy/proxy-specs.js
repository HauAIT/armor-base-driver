"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("source-map-support/register");
var _ = require("../..");
var _mockRequest = _interopRequireDefault(require("./mock-request"));
var _chai = _interopRequireDefault(require("chai"));
var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));
var _errors = require("../../lib/protocol/errors");
const should = _chai.default.should();
_chai.default.use(_chaiAsPromised.default);
function buildReqRes(url, method, body) {
  let req = {
    originalUrl: url,
    method,
    body
  };
  let res = {};
  res.headers = {};
  res.set = (k, v) => {
    res[k] = v;
  };
  res.status = code => {
    res.sentCode = code;
    return res;
  };
  res.send = body => {
    try {
      body = JSON.parse(body);
    } catch (e) {}
    res.sentBody = body;
  };
  return [req, res];
}
function mockProxy(opts = {}) {
  let proxy = new _.JWProxy(opts);
  proxy.request = async function (...args) {
    return await (0, _mockRequest.default)(...args);
  };
  return proxy;
}
describe('proxy', function () {
  it('should override default params', function () {
    let j = mockProxy({
      server: '127.0.0.2'
    });
    j.server.should.equal('127.0.0.2');
    j.port.should.equal(4444);
  });
  it('should save session id on session creation', async function () {
    let j = mockProxy();
    let [res, body] = await j.proxy('/session', 'POST', {
      desiredCapabilities: {}
    });
    res.statusCode.should.equal(200);
    body.should.eql({
      status: 0,
      sessionId: '123',
      value: {
        browserName: 'boo'
      }
    });
    j.sessionId.should.equal('123');
  });
  describe('getUrlForProxy', function () {
    it('should modify session id, host, and port', function () {
      let j = mockProxy({
        sessionId: '123'
      });
      j.getUrlForProxy('http://host.com:1234/wd/hub/session/456/element/200/value').should.eql('http://localhost:4444/wd/hub/session/123/element/200/value');
    });
    it('should prepend scheme, host and port if not provided', function () {
      let j = mockProxy({
        sessionId: '123'
      });
      j.getUrlForProxy('/wd/hub/session/456/element/200/value').should.eql('http://localhost:4444/wd/hub/session/123/element/200/value');
    });
    it('should respect nonstandard incoming request base path', function () {
      let j = mockProxy({
        sessionId: '123',
        reqBasePath: ''
      });
      j.getUrlForProxy('/session/456/element/200/value').should.eql('http://localhost:4444/wd/hub/session/123/element/200/value');
      j = mockProxy({
        sessionId: '123',
        reqBasePath: '/my/base/path'
      });
      j.getUrlForProxy('/my/base/path/session/456/element/200/value').should.eql('http://localhost:4444/wd/hub/session/123/element/200/value');
    });
    it('should work with urls which do not have session ids', function () {
      let j = mockProxy({
        sessionId: '123'
      });
      j.getUrlForProxy('http://host.com:1234/wd/hub/session').should.eql('http://localhost:4444/wd/hub/session');
      let newUrl = j.getUrlForProxy('/wd/hub/session');
      newUrl.should.eql('http://localhost:4444/wd/hub/session');
    });
    it('should throw an error if url requires a sessionId but its null', function () {
      let j = mockProxy();
      let e;
      try {
        j.getUrlForProxy('/wd/hub/session/456/element/200/value');
      } catch (err) {
        e = err;
      }
      should.exist(e);
      e.message.should.contain('without session id');
    });
    it('should not throw an error if url does not require a session id and its null', function () {
      let j = mockProxy();
      let newUrl = j.getUrlForProxy('/wd/hub/status');
      should.exist(newUrl);
    });
  });
  describe('straight proxy', function () {
    it('should successfully proxy straight', async function () {
      let j = mockProxy();
      let [res, body] = await j.proxy('/status', 'GET');
      res.statusCode.should.equal(200);
      body.should.eql({
        status: 0,
        value: {
          foo: 'bar'
        }
      });
    });
    it('should pass along request errors', function () {
      let j = mockProxy({
        sessionId: '123'
      });
      j.proxy('/badurl', 'GET').should.eventually.be.rejectedWith('Could not proxy');
    });
    it('should proxy error responses and codes', async function () {
      let j = mockProxy({
        sessionId: '123'
      });
      try {
        await j.proxy('/element/bad/text', 'GET');
      } catch (e) {
        (0, _errors.isErrorType)(e.getActualError(), _errors.errors.ElementNotVisibleError).should.be.true;
      }
    });
  });
  describe('command proxy', function () {
    it('should successfully proxy command', async function () {
      let j = mockProxy();
      let res = await j.command('/status', 'GET');
      res.should.eql({
        foo: 'bar'
      });
    });
    it('should pass along request errors', function () {
      let j = mockProxy({
        sessionId: '123'
      });
      j.command('/badurl', 'GET').should.eventually.be.rejectedWith('Could not proxy');
    });
    it('should throw when a command fails', async function () {
      let j = mockProxy({
        sessionId: '123'
      });
      let e = null;
      try {
        await j.command('/element/bad/text', 'GET');
      } catch (err) {
        e = err;
      }
      should.exist(e);
      e.message.should.contain('Invisible element');
    });
    it('should throw when a command fails with a 200 because the status is not 0', async function () {
      let j = mockProxy({
        sessionId: '123'
      });
      let e = null;
      try {
        await j.command('/element/200/text', 'GET');
      } catch (err) {
        e = err;
      }
      should.exist(e);
      e.error.should.eql('element not visible');
    });
    it('should throw when a command fails with a 100', async function () {
      let j = mockProxy({
        sessionId: '123'
      });
      let e = null;
      try {
        await j.command('/session/badchrome/nochrome', 'GET');
      } catch (err) {
        e = err;
      }
      should.exist(e);
      e.message.should.contain('chrome not reachable');
    });
  });
  describe('req/res proxy', function () {
    it('should successfully proxy via req and send to res', async function () {
      let j = mockProxy();
      let [req, res] = buildReqRes('/status', 'GET');
      await j.proxyReqRes(req, res);
      res.headers['content-type'].should.equal('application/json; charset=utf-8');
      res.sentCode.should.equal(200);
      res.sentBody.should.eql({
        status: 0,
        value: {
          foo: 'bar'
        }
      });
    });
    it('should rewrite the inner session id so it doesnt change', async function () {
      let j = mockProxy({
        sessionId: '123'
      });
      let [req, res] = buildReqRes('/element/200/value', 'GET');
      await j.proxyReqRes(req, res);
      res.sentBody.should.eql({
        status: 0,
        value: 'foobar',
        sessionId: '123'
      });
    });
    it('should rewrite the inner session id with sessionId in url', async function () {
      let j = mockProxy({
        sessionId: '123'
      });
      let [req, res] = buildReqRes('/wd/hub/session/456/element/200/value', 'POST');
      await j.proxyReqRes(req, res);
      res.sentBody.should.eql({
        status: 0,
        value: 'foobar',
        sessionId: '456'
      });
    });
    it('should pass through urls that do not require session IDs', async function () {
      let j = mockProxy({
        sessionId: '123'
      });
      let [req, res] = buildReqRes('/wd/hub/status', 'GET');
      await j.proxyReqRes(req, res);
      res.sentBody.should.eql({
        status: 0,
        value: {
          'foo': 'bar'
        }
      });
    });
    it('should proxy strange responses', async function () {
      let j = mockProxy({
        sessionId: '123'
      });
      let [req, res] = buildReqRes('/nochrome', 'GET');
      await j.proxyReqRes(req, res);
      res.sentCode.should.equal(100);
      res.sentBody.should.eql({
        status: 0,
        value: {
          message: 'chrome not reachable'
        }
      });
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9qc29ud3AtcHJveHkvcHJveHktc3BlY3MuanMiLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsIl9tb2NrUmVxdWVzdCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY2hhaSIsIl9jaGFpQXNQcm9taXNlZCIsIl9lcnJvcnMiLCJzaG91bGQiLCJjaGFpIiwidXNlIiwiY2hhaUFzUHJvbWlzZWQiLCJidWlsZFJlcVJlcyIsInVybCIsIm1ldGhvZCIsImJvZHkiLCJyZXEiLCJvcmlnaW5hbFVybCIsInJlcyIsImhlYWRlcnMiLCJzZXQiLCJrIiwidiIsInN0YXR1cyIsImNvZGUiLCJzZW50Q29kZSIsInNlbmQiLCJKU09OIiwicGFyc2UiLCJlIiwic2VudEJvZHkiLCJtb2NrUHJveHkiLCJvcHRzIiwicHJveHkiLCJKV1Byb3h5IiwicmVxdWVzdCIsImFyZ3MiLCJkZXNjcmliZSIsIml0IiwiaiIsInNlcnZlciIsImVxdWFsIiwicG9ydCIsImRlc2lyZWRDYXBhYmlsaXRpZXMiLCJzdGF0dXNDb2RlIiwiZXFsIiwic2Vzc2lvbklkIiwidmFsdWUiLCJicm93c2VyTmFtZSIsImdldFVybEZvclByb3h5IiwicmVxQmFzZVBhdGgiLCJuZXdVcmwiLCJlcnIiLCJleGlzdCIsIm1lc3NhZ2UiLCJjb250YWluIiwiZm9vIiwiZXZlbnR1YWxseSIsImJlIiwicmVqZWN0ZWRXaXRoIiwiaXNFcnJvclR5cGUiLCJnZXRBY3R1YWxFcnJvciIsImVycm9ycyIsIkVsZW1lbnROb3RWaXNpYmxlRXJyb3IiLCJ0cnVlIiwiY29tbWFuZCIsImVycm9yIiwicHJveHlSZXFSZXMiXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIiwic291cmNlcyI6WyJ0ZXN0L2pzb253cC1wcm94eS9wcm94eS1zcGVjcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcblxuaW1wb3J0IHsgSldQcm94eSB9IGZyb20gJy4uLy4uJztcbmltcG9ydCByZXF1ZXN0IGZyb20gJy4vbW9jay1yZXF1ZXN0JztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IHsgaXNFcnJvclR5cGUsIGVycm9ycyB9IGZyb20gJy4uLy4uL2xpYi9wcm90b2NvbC9lcnJvcnMnO1xuXG5cbmNvbnN0IHNob3VsZCA9IGNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmZ1bmN0aW9uIGJ1aWxkUmVxUmVzICh1cmwsIG1ldGhvZCwgYm9keSkge1xuICBsZXQgcmVxID0ge29yaWdpbmFsVXJsOiB1cmwsIG1ldGhvZCwgYm9keX07XG4gIGxldCByZXMgPSB7fTtcbiAgcmVzLmhlYWRlcnMgPSB7fTtcbiAgcmVzLnNldCA9IChrLCB2KSA9PiB7IHJlc1trXSA9IHY7IH07XG4gIHJlcy5zdGF0dXMgPSAoY29kZSkgPT4ge1xuICAgIHJlcy5zZW50Q29kZSA9IGNvZGU7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcbiAgcmVzLnNlbmQgPSAoYm9keSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBib2R5ID0gSlNPTi5wYXJzZShib2R5KTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJlcy5zZW50Qm9keSA9IGJvZHk7XG4gIH07XG4gIHJldHVybiBbcmVxLCByZXNdO1xufVxuXG5mdW5jdGlvbiBtb2NrUHJveHkgKG9wdHMgPSB7fSkge1xuICBsZXQgcHJveHkgPSBuZXcgSldQcm94eShvcHRzKTtcbiAgcHJveHkucmVxdWVzdCA9IGFzeW5jIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgcmV0dXJuIGF3YWl0IHJlcXVlc3QoLi4uYXJncyk7XG4gIH07XG4gIHJldHVybiBwcm94eTtcbn1cblxuZGVzY3JpYmUoJ3Byb3h5JywgZnVuY3Rpb24gKCkge1xuICBpdCgnc2hvdWxkIG92ZXJyaWRlIGRlZmF1bHQgcGFyYW1zJywgZnVuY3Rpb24gKCkge1xuICAgIGxldCBqID0gbW9ja1Byb3h5KHtzZXJ2ZXI6ICcxMjcuMC4wLjInfSk7XG4gICAgai5zZXJ2ZXIuc2hvdWxkLmVxdWFsKCcxMjcuMC4wLjInKTtcbiAgICBqLnBvcnQuc2hvdWxkLmVxdWFsKDQ0NDQpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBzYXZlIHNlc3Npb24gaWQgb24gc2Vzc2lvbiBjcmVhdGlvbicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgaiA9IG1vY2tQcm94eSgpO1xuICAgIGxldCBbcmVzLCBib2R5XSA9IGF3YWl0IGoucHJveHkoJy9zZXNzaW9uJywgJ1BPU1QnLCB7ZGVzaXJlZENhcGFiaWxpdGllczoge319KTtcbiAgICByZXMuc3RhdHVzQ29kZS5zaG91bGQuZXF1YWwoMjAwKTtcbiAgICBib2R5LnNob3VsZC5lcWwoe3N0YXR1czogMCwgc2Vzc2lvbklkOiAnMTIzJywgdmFsdWU6IHticm93c2VyTmFtZTogJ2Jvbyd9fSk7XG4gICAgai5zZXNzaW9uSWQuc2hvdWxkLmVxdWFsKCcxMjMnKTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdnZXRVcmxGb3JQcm94eScsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIG1vZGlmeSBzZXNzaW9uIGlkLCBob3N0LCBhbmQgcG9ydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBqID0gbW9ja1Byb3h5KHtzZXNzaW9uSWQ6ICcxMjMnfSk7XG4gICAgICBqLmdldFVybEZvclByb3h5KCdodHRwOi8vaG9zdC5jb206MTIzNC93ZC9odWIvc2Vzc2lvbi80NTYvZWxlbWVudC8yMDAvdmFsdWUnKVxuICAgICAgIC5zaG91bGQuZXFsKCdodHRwOi8vbG9jYWxob3N0OjQ0NDQvd2QvaHViL3Nlc3Npb24vMTIzL2VsZW1lbnQvMjAwL3ZhbHVlJyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBwcmVwZW5kIHNjaGVtZSwgaG9zdCBhbmQgcG9ydCBpZiBub3QgcHJvdmlkZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgaiA9IG1vY2tQcm94eSh7c2Vzc2lvbklkOiAnMTIzJ30pO1xuICAgICAgai5nZXRVcmxGb3JQcm94eSgnL3dkL2h1Yi9zZXNzaW9uLzQ1Ni9lbGVtZW50LzIwMC92YWx1ZScpXG4gICAgICAgLnNob3VsZC5lcWwoJ2h0dHA6Ly9sb2NhbGhvc3Q6NDQ0NC93ZC9odWIvc2Vzc2lvbi8xMjMvZWxlbWVudC8yMDAvdmFsdWUnKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHJlc3BlY3Qgbm9uc3RhbmRhcmQgaW5jb21pbmcgcmVxdWVzdCBiYXNlIHBhdGgnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgaiA9IG1vY2tQcm94eSh7c2Vzc2lvbklkOiAnMTIzJywgcmVxQmFzZVBhdGg6ICcnfSk7XG4gICAgICBqLmdldFVybEZvclByb3h5KCcvc2Vzc2lvbi80NTYvZWxlbWVudC8yMDAvdmFsdWUnKVxuICAgICAgIC5zaG91bGQuZXFsKCdodHRwOi8vbG9jYWxob3N0OjQ0NDQvd2QvaHViL3Nlc3Npb24vMTIzL2VsZW1lbnQvMjAwL3ZhbHVlJyk7XG5cbiAgICAgIGogPSBtb2NrUHJveHkoe3Nlc3Npb25JZDogJzEyMycsIHJlcUJhc2VQYXRoOiAnL215L2Jhc2UvcGF0aCd9KTtcbiAgICAgIGouZ2V0VXJsRm9yUHJveHkoJy9teS9iYXNlL3BhdGgvc2Vzc2lvbi80NTYvZWxlbWVudC8yMDAvdmFsdWUnKVxuICAgICAgIC5zaG91bGQuZXFsKCdodHRwOi8vbG9jYWxob3N0OjQ0NDQvd2QvaHViL3Nlc3Npb24vMTIzL2VsZW1lbnQvMjAwL3ZhbHVlJyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB3b3JrIHdpdGggdXJscyB3aGljaCBkbyBub3QgaGF2ZSBzZXNzaW9uIGlkcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBqID0gbW9ja1Byb3h5KHtzZXNzaW9uSWQ6ICcxMjMnfSk7XG4gICAgICBqLmdldFVybEZvclByb3h5KCdodHRwOi8vaG9zdC5jb206MTIzNC93ZC9odWIvc2Vzc2lvbicpXG4gICAgICAgLnNob3VsZC5lcWwoJ2h0dHA6Ly9sb2NhbGhvc3Q6NDQ0NC93ZC9odWIvc2Vzc2lvbicpO1xuXG4gICAgICBsZXQgbmV3VXJsID0gai5nZXRVcmxGb3JQcm94eSgnL3dkL2h1Yi9zZXNzaW9uJyk7XG4gICAgICBuZXdVcmwuc2hvdWxkLmVxbCgnaHR0cDovL2xvY2FsaG9zdDo0NDQ0L3dkL2h1Yi9zZXNzaW9uJyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciBpZiB1cmwgcmVxdWlyZXMgYSBzZXNzaW9uSWQgYnV0IGl0cyBudWxsJywgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGogPSBtb2NrUHJveHkoKTtcbiAgICAgIGxldCBlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgai5nZXRVcmxGb3JQcm94eSgnL3dkL2h1Yi9zZXNzaW9uLzQ1Ni9lbGVtZW50LzIwMC92YWx1ZScpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGUgPSBlcnI7XG4gICAgICB9XG4gICAgICBzaG91bGQuZXhpc3QoZSk7XG4gICAgICBlLm1lc3NhZ2Uuc2hvdWxkLmNvbnRhaW4oJ3dpdGhvdXQgc2Vzc2lvbiBpZCcpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgbm90IHRocm93IGFuIGVycm9yIGlmIHVybCBkb2VzIG5vdCByZXF1aXJlIGEgc2Vzc2lvbiBpZCBhbmQgaXRzIG51bGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgaiA9IG1vY2tQcm94eSgpO1xuICAgICAgbGV0IG5ld1VybCA9IGouZ2V0VXJsRm9yUHJveHkoJy93ZC9odWIvc3RhdHVzJyk7XG5cbiAgICAgIHNob3VsZC5leGlzdChuZXdVcmwpO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJ3N0cmFpZ2h0IHByb3h5JywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdzaG91bGQgc3VjY2Vzc2Z1bGx5IHByb3h5IHN0cmFpZ2h0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGogPSBtb2NrUHJveHkoKTtcbiAgICAgIGxldCBbcmVzLCBib2R5XSA9IGF3YWl0IGoucHJveHkoJy9zdGF0dXMnLCAnR0VUJyk7XG4gICAgICByZXMuc3RhdHVzQ29kZS5zaG91bGQuZXF1YWwoMjAwKTtcbiAgICAgIGJvZHkuc2hvdWxkLmVxbCh7c3RhdHVzOiAwLCB2YWx1ZToge2ZvbzogJ2Jhcid9fSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBwYXNzIGFsb25nIHJlcXVlc3QgZXJyb3JzJywgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGogPSBtb2NrUHJveHkoe3Nlc3Npb25JZDogJzEyMyd9KTtcbiAgICAgIGoucHJveHkoJy9iYWR1cmwnLCAnR0VUJykuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKCdDb3VsZCBub3QgcHJveHknKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHByb3h5IGVycm9yIHJlc3BvbnNlcyBhbmQgY29kZXMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgaiA9IG1vY2tQcm94eSh7c2Vzc2lvbklkOiAnMTIzJ30pO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgai5wcm94eSgnL2VsZW1lbnQvYmFkL3RleHQnLCAnR0VUJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlzRXJyb3JUeXBlKGUuZ2V0QWN0dWFsRXJyb3IoKSwgZXJyb3JzLkVsZW1lbnROb3RWaXNpYmxlRXJyb3IpLnNob3VsZC5iZS50cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJ2NvbW1hbmQgcHJveHknLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBzdWNjZXNzZnVsbHkgcHJveHkgY29tbWFuZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBqID0gbW9ja1Byb3h5KCk7XG4gICAgICBsZXQgcmVzID0gYXdhaXQgai5jb21tYW5kKCcvc3RhdHVzJywgJ0dFVCcpO1xuICAgICAgcmVzLnNob3VsZC5lcWwoe2ZvbzogJ2Jhcid9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHBhc3MgYWxvbmcgcmVxdWVzdCBlcnJvcnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgaiA9IG1vY2tQcm94eSh7c2Vzc2lvbklkOiAnMTIzJ30pO1xuICAgICAgai5jb21tYW5kKCcvYmFkdXJsJywgJ0dFVCcpLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aCgnQ291bGQgbm90IHByb3h5Jyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0aHJvdyB3aGVuIGEgY29tbWFuZCBmYWlscycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBqID0gbW9ja1Byb3h5KHtzZXNzaW9uSWQ6ICcxMjMnfSk7XG4gICAgICBsZXQgZSA9IG51bGw7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBqLmNvbW1hbmQoJy9lbGVtZW50L2JhZC90ZXh0JywgJ0dFVCcpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGUgPSBlcnI7XG4gICAgICB9XG4gICAgICBzaG91bGQuZXhpc3QoZSk7XG4gICAgICBlLm1lc3NhZ2Uuc2hvdWxkLmNvbnRhaW4oJ0ludmlzaWJsZSBlbGVtZW50Jyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0aHJvdyB3aGVuIGEgY29tbWFuZCBmYWlscyB3aXRoIGEgMjAwIGJlY2F1c2UgdGhlIHN0YXR1cyBpcyBub3QgMCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBqID0gbW9ja1Byb3h5KHtzZXNzaW9uSWQ6ICcxMjMnfSk7XG4gICAgICBsZXQgZSA9IG51bGw7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBqLmNvbW1hbmQoJy9lbGVtZW50LzIwMC90ZXh0JywgJ0dFVCcpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGUgPSBlcnI7XG4gICAgICB9XG4gICAgICBzaG91bGQuZXhpc3QoZSk7XG4gICAgICBlLmVycm9yLnNob3VsZC5lcWwoJ2VsZW1lbnQgbm90IHZpc2libGUnKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHRocm93IHdoZW4gYSBjb21tYW5kIGZhaWxzIHdpdGggYSAxMDAnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgaiA9IG1vY2tQcm94eSh7c2Vzc2lvbklkOiAnMTIzJ30pO1xuICAgICAgbGV0IGUgPSBudWxsO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgai5jb21tYW5kKCcvc2Vzc2lvbi9iYWRjaHJvbWUvbm9jaHJvbWUnLCAnR0VUJyk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgZSA9IGVycjtcbiAgICAgIH1cbiAgICAgIHNob3VsZC5leGlzdChlKTtcbiAgICAgIGUubWVzc2FnZS5zaG91bGQuY29udGFpbignY2hyb21lIG5vdCByZWFjaGFibGUnKTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdyZXEvcmVzIHByb3h5JywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdzaG91bGQgc3VjY2Vzc2Z1bGx5IHByb3h5IHZpYSByZXEgYW5kIHNlbmQgdG8gcmVzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGogPSBtb2NrUHJveHkoKTtcbiAgICAgIGxldCBbcmVxLCByZXNdID0gYnVpbGRSZXFSZXMoJy9zdGF0dXMnLCAnR0VUJyk7XG4gICAgICBhd2FpdCBqLnByb3h5UmVxUmVzKHJlcSwgcmVzKTtcbiAgICAgIHJlcy5oZWFkZXJzWydjb250ZW50LXR5cGUnXS5zaG91bGQuZXF1YWwoJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJlcy5zZW50Q29kZS5zaG91bGQuZXF1YWwoMjAwKTtcbiAgICAgIHJlcy5zZW50Qm9keS5zaG91bGQuZXFsKHtzdGF0dXM6IDAsIHZhbHVlOiB7Zm9vOiAnYmFyJ319KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHJld3JpdGUgdGhlIGlubmVyIHNlc3Npb24gaWQgc28gaXQgZG9lc250IGNoYW5nZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBqID0gbW9ja1Byb3h5KHtzZXNzaW9uSWQ6ICcxMjMnfSk7XG4gICAgICBsZXQgW3JlcSwgcmVzXSA9IGJ1aWxkUmVxUmVzKCcvZWxlbWVudC8yMDAvdmFsdWUnLCAnR0VUJyk7XG4gICAgICBhd2FpdCBqLnByb3h5UmVxUmVzKHJlcSwgcmVzKTtcbiAgICAgIHJlcy5zZW50Qm9keS5zaG91bGQuZXFsKHtzdGF0dXM6IDAsIHZhbHVlOiAnZm9vYmFyJywgc2Vzc2lvbklkOiAnMTIzJ30pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgcmV3cml0ZSB0aGUgaW5uZXIgc2Vzc2lvbiBpZCB3aXRoIHNlc3Npb25JZCBpbiB1cmwnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgaiA9IG1vY2tQcm94eSh7c2Vzc2lvbklkOiAnMTIzJ30pO1xuICAgICAgbGV0IFtyZXEsIHJlc10gPSBidWlsZFJlcVJlcygnL3dkL2h1Yi9zZXNzaW9uLzQ1Ni9lbGVtZW50LzIwMC92YWx1ZScsICdQT1NUJyk7XG4gICAgICBhd2FpdCBqLnByb3h5UmVxUmVzKHJlcSwgcmVzKTtcbiAgICAgIHJlcy5zZW50Qm9keS5zaG91bGQuZXFsKHtzdGF0dXM6IDAsIHZhbHVlOiAnZm9vYmFyJywgc2Vzc2lvbklkOiAnNDU2J30pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgcGFzcyB0aHJvdWdoIHVybHMgdGhhdCBkbyBub3QgcmVxdWlyZSBzZXNzaW9uIElEcycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBqID0gbW9ja1Byb3h5KHtzZXNzaW9uSWQ6ICcxMjMnfSk7XG4gICAgICBsZXQgW3JlcSwgcmVzXSA9IGJ1aWxkUmVxUmVzKCcvd2QvaHViL3N0YXR1cycsICdHRVQnKTtcbiAgICAgIGF3YWl0IGoucHJveHlSZXFSZXMocmVxLCByZXMpO1xuICAgICAgcmVzLnNlbnRCb2R5LnNob3VsZC5lcWwoe3N0YXR1czogMCwgdmFsdWU6IHsnZm9vJzogJ2Jhcid9fSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBwcm94eSBzdHJhbmdlIHJlc3BvbnNlcycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBqID0gbW9ja1Byb3h5KHtzZXNzaW9uSWQ6ICcxMjMnfSk7XG4gICAgICBsZXQgW3JlcSwgcmVzXSA9IGJ1aWxkUmVxUmVzKCcvbm9jaHJvbWUnLCAnR0VUJyk7XG4gICAgICBhd2FpdCBqLnByb3h5UmVxUmVzKHJlcSwgcmVzKTtcbiAgICAgIHJlcy5zZW50Q29kZS5zaG91bGQuZXF1YWwoMTAwKTtcbiAgICAgIHJlcy5zZW50Qm9keS5zaG91bGQuZXFsKHtzdGF0dXM6IDAsIHZhbHVlOiB7bWVzc2FnZTogJ2Nocm9tZSBub3QgcmVhY2hhYmxlJ319KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLElBQUFBLENBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLEtBQUEsR0FBQUQsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFJLGVBQUEsR0FBQUYsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFLLE9BQUEsR0FBQUwsT0FBQTtBQUdBLE1BQU1NLE1BQU0sR0FBR0MsYUFBSSxDQUFDRCxNQUFNLENBQUMsQ0FBQztBQUM1QkMsYUFBSSxDQUFDQyxHQUFHLENBQUNDLHVCQUFjLENBQUM7QUFFeEIsU0FBU0MsV0FBV0EsQ0FBRUMsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRTtFQUN2QyxJQUFJQyxHQUFHLEdBQUc7SUFBQ0MsV0FBVyxFQUFFSixHQUFHO0lBQUVDLE1BQU07SUFBRUM7RUFBSSxDQUFDO0VBQzFDLElBQUlHLEdBQUcsR0FBRyxDQUFDLENBQUM7RUFDWkEsR0FBRyxDQUFDQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0VBQ2hCRCxHQUFHLENBQUNFLEdBQUcsR0FBRyxDQUFDQyxDQUFDLEVBQUVDLENBQUMsS0FBSztJQUFFSixHQUFH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
