"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("source-map-support/register");
var _chai = _interopRequireDefault(require("chai"));
var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));
var _ = require("../..");
var _fakeDriver = require("../protocol/fake-driver");
const should = _chai.default.should();
_chai.default.use(_chaiAsPromised.default);
describe('proxy', function () {
  const jwproxy = new _.JWProxy();
  let baseServer;
  before(async function () {
    baseServer = await (0, _.server)({
      routeConfiguringFunction: (0, _.routeConfiguringFunction)(new _fakeDriver.FakeDriver()),
      port: 4444
    });
  });
  after(async function () {
    await baseServer.close();
  });
  it('should proxy status straight', async function () {
    let [res, resBody] = await jwproxy.proxy('/status', 'GET');
    res.statusCode.should.equal(200);
    resBody.status.should.equal(0);
    resBody.value.should.equal(`I'm fine`);
  });
  it('should proxy status as command', async function () {
    const res = await jwproxy.command('/status', 'GET');
    res.should.eql(`I'm fine`);
  });
  describe('new session', function () {
    afterEach(async function () {
      await jwproxy.command('', 'DELETE');
    });
    it('should start a new session', async function () {
      const caps = {
        browserName: 'fake'
      };
      const res = await jwproxy.command('/session', 'POST', {
        desiredCapabilities: caps
      });
      res.should.have.property('browserName');
      jwproxy.sessionId.should.have.length(48);
    });
  });
  describe('delete session', function () {
    beforeEach(async function () {
      await jwproxy.command('/session', 'POST', {
        desiredCapabilities: {}
      });
    });
    it('should quit a session', async function () {
      const res = await jwproxy.command('', 'DELETE');
      should.not.exist(res);
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9qc29ud3AtcHJveHkvcHJveHktZTJlLXNwZWNzLmpzIiwibmFtZXMiOlsiX2NoYWkiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jaGFpQXNQcm9taXNlZCIsIl8iLCJfZmFrZURyaXZlciIsInNob3VsZCIsImNoYWkiLCJ1c2UiLCJjaGFpQXNQcm9taXNlZCIsImRlc2NyaWJlIiwiandwcm94eSIsIkpXUHJveHkiLCJiYXNlU2VydmVyIiwiYmVmb3JlIiwic2VydmVyIiwicm91dGVDb25maWd1cmluZ0Z1bmN0aW9uIiwiRmFrZURyaXZlciIsInBvcnQiLCJhZnRlciIsImNsb3NlIiwiaXQiLCJyZXMiLCJyZXNCb2R5IiwicHJveHkiLCJzdGF0dXNDb2RlIiwiZXF1YWwiLCJzdGF0dXMiLCJ2YWx1ZSIsImNvbW1hbmQiLCJlcWwiLCJhZnRlckVhY2giLCJjYXBzIiwiYnJvd3Nlck5hbWUiLCJkZXNpcmVkQ2FwYWJpbGl0aWVzIiwiaGF2ZSIsInByb3BlcnR5Iiwic2Vzc2lvbklkIiwibGVuZ3RoIiwiYmVmb3JlRWFjaCIsIm5vdCIsImV4aXN0Il0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiIsInNvdXJjZXMiOlsidGVzdC9qc29ud3AtcHJveHkvcHJveHktZTJlLXNwZWNzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IHsgSldQcm94eSwgc2VydmVyLCByb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24gfSBmcm9tICcuLi8uLic7XG5pbXBvcnQgeyBGYWtlRHJpdmVyIH0gZnJvbSAnLi4vcHJvdG9jb2wvZmFrZS1kcml2ZXInO1xuXG5jb25zdCBzaG91bGQgPSBjaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5kZXNjcmliZSgncHJveHknLCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGp3cHJveHkgPSBuZXcgSldQcm94eSgpO1xuICBsZXQgYmFzZVNlcnZlcjtcbiAgYmVmb3JlKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBiYXNlU2VydmVyID0gYXdhaXQgc2VydmVyKHtcbiAgICAgIHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbjogcm91dGVDb25maWd1cmluZ0Z1bmN0aW9uKG5ldyBGYWtlRHJpdmVyKCkpLFxuICAgICAgcG9ydDogNDQ0NCxcbiAgICB9KTtcbiAgfSk7XG4gIGFmdGVyKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBhd2FpdCBiYXNlU2VydmVyLmNsb3NlKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcHJveHkgc3RhdHVzIHN0cmFpZ2h0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGxldCBbcmVzLCByZXNCb2R5XSA9IGF3YWl0IGp3cHJveHkucHJveHkoJy9zdGF0dXMnLCAnR0VUJyk7XG4gICAgcmVzLnN0YXR1c0NvZGUuc2hvdWxkLmVxdWFsKDIwMCk7XG4gICAgcmVzQm9keS5zdGF0dXMuc2hvdWxkLmVxdWFsKDApO1xuICAgIHJlc0JvZHkudmFsdWUuc2hvdWxkLmVxdWFsKGBJJ20gZmluZWApO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBwcm94eSBzdGF0dXMgYXMgY29tbWFuZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBqd3Byb3h5LmNvbW1hbmQoJy9zdGF0dXMnLCAnR0VUJyk7XG4gICAgcmVzLnNob3VsZC5lcWwoYEknbSBmaW5lYCk7XG4gIH0pO1xuICBkZXNjcmliZSgnbmV3IHNlc3Npb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgYWZ0ZXJFYWNoKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGF3YWl0IGp3cHJveHkuY29tbWFuZCgnJywgJ0RFTEVURScpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgc3RhcnQgYSBuZXcgc2Vzc2lvbicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGNhcHMgPSB7YnJvd3Nlck5hbWU6ICdmYWtlJ307XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBqd3Byb3h5LmNvbW1hbmQoJy9zZXNzaW9uJywgJ1BPU1QnLCB7ZGVzaXJlZENhcGFiaWxpdGllczogY2Fwc30pO1xuICAgICAgcmVzLnNob3VsZC5oYXZlLnByb3BlcnR5KCdicm93c2VyTmFtZScpO1xuICAgICAgandwcm94eS5zZXNzaW9uSWQuc2hvdWxkLmhhdmUubGVuZ3RoKDQ4KTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdkZWxldGUgc2Vzc2lvbicsIGZ1bmN0aW9uICgpIHtcbiAgICBiZWZvcmVFYWNoKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGF3YWl0IGp3cHJveHkuY29tbWFuZCgnL3Nlc3Npb24nLCAnUE9TVCcsIHtkZXNpcmVkQ2FwYWJpbGl0aWVzOiB7fX0pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgcXVpdCBhIHNlc3Npb24nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBqd3Byb3h5LmNvbW1hbmQoJycsICdERUxFVEUnKTtcbiAgICAgIHNob3VsZC5ub3QuZXhpc3QocmVzKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLENBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUVBLE1BQU1JLE1BQU0sR0FBR0MsYUFBSSxDQUFDRCxNQUFNLENBQUMsQ0FBQztBQUM1QkMsYUFBSSxDQUFDQyxHQUFHLENBQUNDLHVCQUFjLENBQUM7QUFFeEJDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsWUFBWTtFQUM1QixNQUFNQyxPQUFPLEdBQUcsSUFBSUMsU0FBTyxDQUFDLENBQUM7RUFDN0IsSUFBSUMsVUFBVTtF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
